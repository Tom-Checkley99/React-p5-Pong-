{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","setup","p5","canvasParentRef","createCanvas","parent","backgroundImage","loadImage","ballImage","paddleImage","draw","image","xBall","yBall","start","move","bounce","paddle","fill","textSize","text","score","Math","floor","random","xSpeed","ySpeed","pubnub","PubNub","publishKey","subscribeKey","subscribe","channels","addListener","message","messageEvent","button","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wRAIqBA,G,wDAEnB,aAAe,IAAD,8BACZ,gBAiCFC,MAAQ,SAACC,EAAIC,GAEXD,EAAGE,aAAa,IAAK,KAAKC,OAAOF,GACjC,EAAKG,gBAAkBJ,EAAGK,UAAU,2BACpC,EAAKC,UAAYN,EAAGK,UAAU,qBAC9B,EAAKE,YAAcP,EAAGK,UAAU,wBAvCpB,EA2CdG,KAAO,SAAAR,GAGJA,EAAGS,MAAM,EAAKL,gBAAiB,EAAG,EAAE,IAAI,KACxCJ,EAAGS,MAAM,EAAKH,UAAW,EAAKI,MAAQ,GAAI,EAAKC,MAAQ,GAAI,GAAI,IAC/DX,EAAGS,MAAM,EAAKF,YAAa,EAAKK,MAAO,IAAK,GAAI,IAGhD,EAAKC,OACL,EAAKC,SACL,EAAKC,OAAOf,GAGXA,EAAGgB,KAAK,SACRhB,EAAGiB,SAAS,IACZjB,EAAGkB,KAAK,UAAY,EAAKC,MAAO,GAAI,KAvDtC,EAAKT,MAAQU,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAC/C,EAAKX,MAAQ,GACb,EAAKY,OAAa,EAClB,EAAKC,QAAe,EACpB,EAAKL,MAAQ,EACb,EAAKP,MAAQ,IACb,EAAKR,gBAAkB,GACvB,EAAKE,UAAY,GACjB,EAAKC,YAAc,GAEnB,EAAKkB,OAAS,IAAIC,IAAO,CACrBC,WAAY,6CACZC,aAAc,+CAEhB,EAAKH,OAAOI,UAAU,CAClBC,SAAU,CAAC,iBAEf,EAAKL,OAAOM,YAAY,CACrBC,QAAS,SAAAC,GACyB,aAA/BA,EAAaD,QAAQE,SACtB,EAAKtB,OAAS,IAEoB,aAA/BqB,EAAaD,QAAQE,SACxB,EAAKtB,OAAS,OA1BT,E,mDA+DVuB,KAAKzB,OAASyB,KAAKZ,OACnBY,KAAKxB,OAASwB,KAAKX,S,gCAIfW,KAAKzB,MAAQ,IACfyB,KAAKzB,MAAQ,OACbyB,KAAKZ,SAAW,IAEdY,KAAKxB,MAAQ,IACfwB,KAAKxB,MAAQ,OACbwB,KAAKX,SAAW,K,6BAKfxB,GACGmC,KAAKzB,MAAQyB,KAAKvB,OACrBuB,KAAKzB,MAAQyB,KAAKvB,MAAQ,IACzBuB,KAAKxB,MAAQ,IAAM,MACnBwB,KAAKZ,SAAW,EAChBY,KAAKX,SAAW,EAChBW,KAAKhB,W,+BAOT,OACI,yBAAKiB,UAAU,OACf,8CACA,kBAAC,IAAD,CAAQrC,MAAOoC,KAAKpC,MAAOS,KAAM2B,KAAK3B,OACtC,yCACA,mFACA,2FACA,6FACA,kE,GAtGuB6B,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvB,a","file":"static/js/main.6e4b8139.chunk.js","sourcesContent":["import React, { Component } from \"react\";                                           // importing React componets from \"react\"\nimport Sketch from \"react-p5\";                                                      // importing Sketch from \"reat p-5\"\nimport PubNub from 'pubnub';                                                        // imoprting Pubnub from \"pubnub\"\nimport './App.css';                                                                 // importing \"App.css\"\nexport default class App extends Component {                                        // calling class called \"App\" and exporting all componets\n\n  constructor() {                                                                   // opening contructor\n    super();                                                                        // calling \"super\" function\n\n    this.xBall = Math.floor(Math.random() * 300) + 50;                              // decalring this.xBall speed\n    this.yBall = 50;                                                                // declaring this.yBall is 50\n    this.xSpeed = (2, 7);                                                           // stating this.xSpeed starts a x value 2 and y value 7\n    this.ySpeed = (-7, -2);                                                         // stating this.ySpeed starts a x value -7 and y value -2\n    this.score = 0                                                                  // stateing this.score is 0\n    this.start = 150;                                                               // stateing this.start is 150\n    this.backgroundImage = \"\";                                                      // defining this.backgroundImage = \"\"\n    this.ballImage = \"\";                                                            // defining this.ballImage = \"\"\n    this.paddleImage = \"\";                                                          // defining this.paddleImage = \"\"\n\n    this.pubnub = new PubNub({                                                      // calling this.pubnub to \"new Pubnub\"\n        publishKey: 'pub-c-3c27741a-6520-44bc-a0dc-458f1fa5d19e',                   // giving Pubnub specifc publihsing key\n        subscribeKey: 'sub-c-d0567ae6-cf2f-11ea-b0f5-2a188b98e439'                  // giving Pubnub specifc subscribing key\n      });\n      this.pubnub.subscribe({                                                       // telling Pubnub to subsribe\n          channels: ['IOE_channel']                                                 // Pubnub is listening at channel \"IOE_channel\"\n      });\n      this.pubnub.addListener({                                                     // calling this.pubnub.addListener\n         message: messageEvent => {                                                 // giving a message to messageEvent\n         if(messageEvent.message.button == \"player1_L\") {                           // if statement saying, if messageEvent to message to button is \"player1_L\"\n           this.start -= 10;                                                        // this.start -=25; (move left at a rate of -=25)\n         }\n           if(messageEvent.message.button == \"player1_R\") {                         // if statement saying, if messageEvent to message to button is \"player1_R\"\n           this.start += 10;                                                        // this.start -=25; (move left at a rate of -=25)\n         }\n      }\n  })\n\n}                                                                                   // closing constructor function\n\n\n  setup = (p5, canvasParentRef) => {                                                // creating setup function for p5, cavnasParentRef\n\n    p5.createCanvas(400, 400).parent(canvasParentRef);                              // use parent to render canvas in this ref (without that p5 render this canvas outside your component)\n    this.backgroundImage = p5.loadImage(\"./assets/background.png\");                 // when this.backgroundImage is called - p5 to load in background.png from assets folder\n    this.ballImage = p5.loadImage(\"./assets/ball.png\");                             // when this.ballImage is called - p5 to load in ball.png from assets folder\n    this.paddleImage = p5.loadImage(\"./assets/paddle.png\")                          // when this.paddleImage is called - p5 to load in paddle.png from assets folder\n};                                                                                  // closing setup function\n\n\n  draw = p5 => {                                                                    // opening draw function with p5\n\n\n     p5.image(this.backgroundImage, 0, 0,400,400);                                  // calling p5image this.backgroundImage\n     p5.image(this.ballImage, this.xBall - 10, this.yBall - 10, 20, 20);            // calling p5image this.ballImage\n     p5.image(this.paddleImage, this.start, 375, 90, 15);                           // calling p5imgae this.paddleImage\n\n\n     this.move();                                                                   // calling this.move function\n     this.bounce();                                                                 // calling this.bounce funciton\n     this.paddle(p5);                                                               // calling this.paddle funciton\n\n\n      p5.fill('black');                                                             // giving fill colour 'black' to score\n      p5.textSize(24);                                                              // giving p5 text a size of 24\n      p5.text(\"Score: \" + this.score, 10, 25);                                      // giving the p5 text a name of \"Score:\"\n}                                                                                   // closing draw function\n\n\n  move()    {                                                                       // opening move function\n      this.xBall += this.xSpeed;                                                    // this.xBall moves at a plus and equal rate to this.xSpeed\n      this.yBall += this.ySpeed;                                                    // this.yBall moves at a plus and equal rate to this.ySpeed\n}                                                                                   // closing move function\n\n  bounce()  {                                                                       // opening bounce function\n      if (this.xBall < 10 ||                                                        // if this.xBall is less than 10\n        this.xBall > 400 - 10) {                                                    // this.xBall is more than 400 - 10\n        this.xSpeed *= -1;                                                          // this.xSpeed multiplied and equal to -1\n      }\n      if (this.yBall < 10 ||                                                        // if this.yBall is less that 10\n        this.yBall > 400 - 10) {                                                    // this.yBall is more than 400 - 10\n        this.ySpeed *= -1;                                                          // this.ySpeed mulitpled and equal to -1\n      }\n}                                                                                   // closing bounce function\n\n\n  paddle(p5) {                                                                      // opening paddle function with p5\n       if ((this.xBall > this.start &&                                              // if this.xBall is more than this.start\n         this.xBall < this.start + 90) &&                                           // this.xBall is less than this.start +90\n         (this.yBall + 10 >= 375)) {                                                // this,yBall + 10 is bigger or equal to 375\n          this.xSpeed *= -1;                                                        // this.xSpeed multiplied or equal to -1\n          this.ySpeed *= -1;                                                        // this.ySpeed multiplied or equal to -1\n          this.score++;                                                             // this.score plus plus\n    }\n}                                                                                   // closing paddle function\n\n\n  render() {                                                                        // opening reder function\n\n      return (                                                                      // opeing return\n          <div className=\"App\">                                                     \n          <h1> EDUCATE-GAME </h1>\n          <Sketch setup={this.setup} draw={this.draw} />\n          <h2>OBJECTIVE</h2>\n          <p> 1) Bounce the ball off the paddle to score points. </p>\n          <p> 2) Failing to hit the ball will result in 0 points scored. </p>\n          <p> 3) Answer questions correctly when promoted to score points. </p>\n          <p> 4) Play for your high score. </p>\n        </div>                                                                      // closing div tag\n\n      );                                                                            // closing return tag\n    }                                                                               // closing render tag\n\n}                                                                                   // exporting class \"App\" and all components\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}